require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::ServersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Server. As you add validations to Server, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "Name",
      shutdown_on_high_load: false,
      cpu_usage: 23.45,
      memory_usage: 45.67,
      disk_usage: 67.89,
      processes: [
        ["cc1", 75.01]
      ]
    }
  }

  let(:invalid_attributes) { { name: nil } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Api::ServersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) { { cpu_usage: 23.45 } }

      it "updates the requested server" do
        server = Server.create! valid_attributes
        put :update, {:token => server.token, :server => new_attributes, format: :json}, valid_session
        server.reload
        expect(response).to have_http_status(200)
        expect(assigns(:server)).to eq(server)
      end
    end
  end

end
